/* Copyright (c) 2015, Daniel Mart√≠ <mvdan@mvdan.cc> */
/* See LICENSE for licensing information */

package main

import (
	"bufio"
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"sort"
	"strings"
)

func addFromIana(tlds map[string]struct{}) {
	resp, err := http.Get("https://data.iana.org/TLD/tlds-alpha-by-domain.txt")
	if err != nil {
		log.Fatalf("Could not fetch url: %s", err)
	}
	defer resp.Body.Close()
	scanner := bufio.NewScanner(resp.Body)
	re := regexp.MustCompile(`^[^#]+$`)
	for scanner.Scan() {
		line := scanner.Text()
		match := re.FindString(line)
		if match == "" {
			continue
		}
		tld := strings.ToLower(match)
		tlds[tld] = struct{}{}
	}
}

func addFromPublicSuffix(tlds map[string]struct{}) {
	resp, err := http.Get("https://publicsuffix.org/list/effective_tld_names.dat")
	if err != nil {
		log.Fatalf("Could not fetch url: %s", err)
	}
	defer resp.Body.Close()
	scanner := bufio.NewScanner(resp.Body)
	re := regexp.MustCompile(`(^([^/.]+)$|^// (xn--[^\s]+)[\s$])`)
	for scanner.Scan() {
		line := scanner.Text()
		matches := re.FindStringSubmatch(line)
		if matches == nil || len(matches) < 4 {
			continue
		}
		tld := matches[2]
		if tld == "" {
			tld = matches[3]
		}
		tlds[tld] = struct{}{}
	}
}

func main() {
	tlds := make(map[string]struct{})
	addFromIana(tlds)
	addFromPublicSuffix(tlds)
	list := make([]string, 0, len(tlds))
	for tld := range tlds {
		list = append(list, tld)
	}
	sort.Strings(list)
	f, err := os.Create("tlds.go")
	if err != nil {
		log.Fatalf("Could not create output file: %s", err)
	}
	f.WriteString(`
/* Generated by tldget */

package xurls

var TLDs = []string{
`)
	for _, tld := range list {
		fmt.Fprintf(f, "\t`%s`,\n", tld)
	}
	f.WriteString("}\n")
}
